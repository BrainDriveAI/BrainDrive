#!/usr/bin/env python3
"""
Demo script showing how the encryption system works with existing API keys
"""
import os
import sys
import json
import asyncio
from pathlib import Path

# Add the backend directory to Python path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

async def demo_encryption():
    """Demonstrate the encryption system with realistic data"""
    print("üîê BrainDrive API Key Encryption Demo")
    print("=" * 50)
    
    # Set encryption key
    os.environ['ENCRYPTION_MASTER_KEY'] = 'demo-encryption-key-for-braindrive-2025'
    
    try:
        from app.core.database import get_db
        from app.models.settings import SettingInstance
        from sqlalchemy import text
        
        print("\n1Ô∏è‚É£ Creating a new settings instance with API keys...")
        
        # This is the same data structure that ComponentOllamaServer.tsx creates
        ollama_settings = {
            "servers": [
                {
                    "id": "server_1742054635336_demo",
                    "serverName": "Local Ollama Server",
                    "serverAddress": "http://localhost:11434",
                    "apiKey": "sk-1234567890abcdef",  # This will be encrypted
                    "connectionStatus": "idle"
                },
                {
                    "id": "server_1742054635337_demo",
                    "serverName": "Remote Ollama Server",
                    "serverAddress": "https://api.ollama.com",
                    "apiKey": "sk-abcdef1234567890",  # This will also be encrypted
                    "connectionStatus": "idle"
                }
            ]
        }
        
        print(f"Original data with API keys:")
        print(json.dumps(ollama_settings, indent=2))
        
        # Get database session
        async for db in get_db():
            # Create a new setting instance (this will automatically encrypt the value)
            new_setting = SettingInstance(
                definition_id="ollama_servers_settings",
                name="Demo Ollama Servers Settings",
                value=ollama_settings,  # This gets encrypted automatically
                scope="user",
                user_id="demo_user_123"
            )
            
            # Add to database
            db.add(new_setting)
            await db.commit()
            await db.refresh(new_setting)
            
            print(f"\n2Ô∏è‚É£ Saved to database with ID: {new_setting.id}")
            
            # Check what's actually stored in the database (encrypted)
            result = await db.execute(
                text("SELECT value FROM settings_instances WHERE id = :id"),
                {"id": new_setting.id}
            )
            raw_value = result.scalar()
            
            print(f"\n3Ô∏è‚É£ Raw encrypted value in database:")
            print(f"Length: {len(raw_value)} characters")
            print(f"First 100 chars: {raw_value[:100]}...")
            print("(This is the encrypted API keys - safe to store)")
            
            # Retrieve the setting (this will automatically decrypt)
            retrieved_setting = await db.get(SettingInstance, new_setting.id)
            
            print(f"\n4Ô∏è‚É£ Retrieved and decrypted data:")
            print(json.dumps(retrieved_setting.value, indent=2))
            
            # Verify API keys are preserved
            original_keys = [server["apiKey"] for server in ollama_settings["servers"]]
            retrieved_keys = [server["apiKey"] for server in retrieved_setting.value["servers"]]
            
            print(f"\n5Ô∏è‚É£ API Key Verification:")
            print(f"Original API keys: {original_keys}")
            print(f"Retrieved API keys: {retrieved_keys}")
            
            if original_keys == retrieved_keys:
                print("‚úÖ API keys preserved perfectly!")
            else:
                print("‚ùå API keys were corrupted!")
                return False
            
            # Clean up
            await db.delete(retrieved_setting)
            await db.commit()
            
            break  # Exit the async generator
        
        print(f"\n6Ô∏è‚É£ Frontend Compatibility:")
        print("‚úÖ ComponentOllamaServer.tsx will work exactly as before")
        print("‚úÖ No changes needed to existing frontend code")
        print("‚úÖ API keys are automatically encrypted/decrypted")
        print("‚úÖ All existing functionality preserved")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def demo_migration_scenario():
    """Demonstrate migrating existing plain-text API keys"""
    print(f"\n" + "=" * 50)
    print("üì¶ Migration Scenario Demo")
    print("=" * 50)
    
    try:
        from app.core.database import get_db
        from app.models.settings import SettingInstance
        from app.core.encryption import encryption_service
        from sqlalchemy import text
        
        # Get database session
        async for db in get_db():
            # First, let's create a "legacy" record with plain-text API key
            # We'll insert it directly to bypass encryption
            legacy_data = {
                "servers": [{
                    "id": "legacy_server_123",
                    "serverName": "Legacy Server",
                    "serverAddress": "http://legacy.example.com",
                    "apiKey": "legacy-plain-text-api-key",
                    "connectionStatus": "idle"
                }]
            }
            
            # Insert as plain JSON (simulating old data)
            await db.execute(
                text("""
                    INSERT INTO settings_instances 
                    (id, definition_id, name, value, scope, user_id, created_at, updated_at)
                    VALUES (:id, :def_id, :name, :value, :scope, :user_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                """),
                {
                    "id": "legacy_demo_record",
                    "def_id": "ollama_servers_settings",
                    "name": "Legacy Demo Record",
                    "value": json.dumps(legacy_data),  # Plain JSON string
                    "scope": "user",
                    "user_id": "demo_user_123"
                }
            )
            await db.commit()
            
            print("1Ô∏è‚É£ Created legacy record with plain-text API key")
            
            # Check if it's detected as encrypted
            result = await db.execute(
                text("SELECT value FROM settings_instances WHERE id = 'legacy_demo_record'")
            )
            raw_value = result.scalar()
            
            is_encrypted = encryption_service.is_encrypted_value(raw_value)
            print(f"2Ô∏è‚É£ Legacy data detected as encrypted: {is_encrypted}")
            print(f"   Raw value: {raw_value}")
            
            # Now retrieve it through the model (should handle plain-text gracefully)
            legacy_setting = await db.get(SettingInstance, "legacy_demo_record")
            print(f"3Ô∏è‚É£ Retrieved legacy data:")
            print(json.dumps(legacy_setting.value, indent=2))
            
            # Update it (this will encrypt it)
            legacy_setting.value["servers"][0]["apiKey"] = "updated-api-key-now-encrypted"
            await db.commit()
            await db.refresh(legacy_setting)
            
            print(f"4Ô∏è‚É£ Updated legacy record (now encrypted)")
            
            # Check the raw value again
            result = await db.execute(
                text("SELECT value FROM settings_instances WHERE id = 'legacy_demo_record'")
            )
            new_raw_value = result.scalar()
            
            is_now_encrypted = encryption_service.is_encrypted_value(new_raw_value)
            print(f"5Ô∏è‚É£ Updated data detected as encrypted: {is_now_encrypted}")
            print(f"   Raw value length: {len(new_raw_value)} chars (vs {len(raw_value)} before)")
            
            # Verify we can still read it
            final_setting = await db.get(SettingInstance, "legacy_demo_record")
            print(f"6Ô∏è‚É£ Final decrypted data:")
            print(json.dumps(final_setting.value, indent=2))
            
            # Clean up
            await db.delete(final_setting)
            await db.commit()
            
            print("‚úÖ Migration scenario completed successfully!")
            
            break  # Exit the async generator
            
    except Exception as e:
        print(f"‚ùå Migration demo failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    async def main():
        success1 = await demo_encryption()
        if success1:
            success2 = await demo_migration_scenario()
            if success1 and success2:
                print(f"\nüéâ All demos completed successfully!")
                print(f"\nüìã Summary:")
                print(f"‚úÖ API keys are automatically encrypted when saved")
                print(f"‚úÖ API keys are automatically decrypted when retrieved")
                print(f"‚úÖ Frontend code requires no changes")
                print(f"‚úÖ Legacy data is handled gracefully")
                print(f"‚úÖ System is ready for production use")
            else:
                sys.exit(1)
        else:
            sys.exit(1)
    
    asyncio.run(main())